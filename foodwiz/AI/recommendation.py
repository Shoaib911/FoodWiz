# -*- coding: utf-8 -*-
"""Sufiyan's Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdSkvgjyysZ4EBuT4W0txE_5nL3ypLbU
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import make_pipeline

# Load the dataset
df = pd.read_csv("C:\\Users\\Administrator\\Desktop\\Shoaib\\FoodWiz\\RAW_recipes.csv")

# Handle missing values
df = df.dropna(subset=['tags', 'ingredients', 'minutes', 'name', 'nutrition'])

# Preprocess text data
df['tags'] = df['tags'].apply(lambda x: ','.join(x.lower().replace(' ', '').split(',')))
df['ingredients'] = df['ingredients'].apply(lambda x: ','.join(x.lower().replace(' ', '').split(',')))
df['name'] = df['name'].apply(lambda x: x.lower())
df['nutrition'] = df['nutrition'].apply(lambda x: x.lower())

# Feature engineering for 'tags' and 'ingredients'
vectorizer_tags = TfidfVectorizer()
vectorizer_ingredients = TfidfVectorizer()
vectorizer_name = TfidfVectorizer()
vectorizer_nutrition = TfidfVectorizer()

# Prepare column transformer
preprocessor = ColumnTransformer(
    transformers=[
        ('tags', vectorizer_tags, 'tags'),
        ('ingredients', vectorizer_ingredients, 'ingredients'),
        ('minutes', 'passthrough', ['minutes']),
        ('name', vectorizer_name, 'name'),
        ('nutrition', vectorizer_nutrition, 'nutrition')
    ],
    remainder='drop'
)

# Step 2: Model Training
# Transform the data
X = preprocessor.fit_transform(df[['tags', 'ingredients', 'minutes', 'name', 'nutrition']])

# Train the NearestNeighbors model
model = NearestNeighbors(n_neighbors=1, algorithm='auto', metric='cosine')
model.fit(X)

# Step 3: Prediction
def recommend_recipe(tags, ingredients, minutes, name, nutrition):
    # Transform input data
    input_data = pd.DataFrame({
        'tags': [tags],
        'ingredients': [ingredients],
        'minutes': [minutes],
        'name': [name],
        'nutrition': [nutrition]
    })
    X_input = preprocessor.transform(input_data)

    # Find nearest neighbors
    distances, indices = model.kneighbors(X_input)
    recommendations = df.iloc[indices[0]].copy()  # Get recommendations

    return recommendations

# Example usage:
tags = 'dessert,sweet'
ingredients = 'sugar,butter,flour'
minutes = 30
name = 'Example Recipe Name'
nutrition = 'Example nutrition values'

recommended_recipes = recommend_recipe(tags, ingredients, minutes, name, nutrition)

# Print the recommended recipes
print("Recommended Recipes:")
print("--------------------")
for idx, recipe in recommended_recipes.iterrows():
    print(f"Recipe Name: {recipe['name']}")
    print(f"Tags: {recipe['tags']}")
    print(f"Ingredients: {recipe['ingredients']}")
    print(f"Cooking Time (minutes): {recipe['minutes']}")
    print(f"Nutrition: {recipe['nutrition']}")
    print("--------------------")

"""Example

"""

# Example usage:
tags = ''
ingredients = ''
minutes = 60
name = 'a bit different breakfast pizza'
nutrition = ''

recommended_recipes = recommend_recipe(tags, ingredients, minutes, name, nutrition)

# Print the recommended recipes
print("Recommended Recipes:")
print("--------------------")
for idx, recipe in recommended_recipes.iterrows():
    print(f"Recipe Name: {recipe['name']}")
    print(f"Tags: {recipe['tags']}")
    print(f"Ingredients: {recipe['ingredients']}")
    print(f"Cooking Time (minutes): {recipe['minutes']}")
    print(f"Nutrition: {recipe['nutrition']}")
    print("--------------------")